{
  "swagger": "2.0",
  "info": {
    "title": "rpc.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/stores/{header.store}/partitions/{header.partition}/compactions": {
      "post": {
        "summary": "Compact compacts the event history in the key-value store. The key-value\nstore should be periodically compacted or the event history will continue to grow\nindefinitely.",
        "operationId": "KV_Compact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ptarmiganpbKVCompactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ptarmiganpbKVCompactionRequest"
            }
          }
        ],
        "tags": [
          "KV"
        ]
      }
    },
    "/v1/stores/{header.store}/partitions/{header.partition}/kvs": {
      "get": {
        "summary": "Query retrieves kvs from a partition",
        "operationId": "KV_Query",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ptarmiganpbKVQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.replica",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "selection.key_gt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "selection.key_gte",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "selection.key_lt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "selection.key_lte",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "selection.mod_revision_gt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection.mod_revision_gte",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection.mod_revision_lt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection.mod_revision_lte",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection.create_revision_gt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection.create_revision_gte",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection.create_revision_lt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection.create_revision_lte",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection.key_starts_with",
            "description": "Key must be prefixed with this value.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "selection.key",
            "description": "Key must equal this value.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "selection.lease",
            "description": "Must belong to this lease.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "Use after to get the next page of results by inserting the after cursor from the\nprevious page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "limit is the limit on the number of keys returned in the result.\nIf limit is set to 0 the default limit is used.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "revision",
            "description": "revision is the revision of the store to use for the query.\nIf revision is less or equal to zero, the range is over the newest key-value store.\nIf the revision has been compacted, ErrCompacted is returned as a response.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "sort_order",
            "description": "sort_order is the order for returned sorted results.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NONE",
              "ASC",
              "DESC"
            ],
            "default": "NONE"
          },
          {
            "name": "sort_target",
            "description": "sort_target is the key-value field to use for sorting.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "KEY",
              "VERSION",
              "CREATE",
              "MOD",
              "VALUE"
            ],
            "default": "KEY"
          },
          {
            "name": "serializable",
            "description": "serializable sets the range request to use serializable member-local reads.\nRange requests are linearizable by default; linearizable requests have higher\nlatency and lower throughput than serializable requests but reflect the current\nconsensus of the cluster. For better performance, in exchange for possible stale reads,\na serializable range request is served locally without needing to reach consensus\nwith other nodes in the cluster.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "exclude_values",
            "description": "exclude_values when set excludes values from the resulting kvs.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "include_count",
            "description": "include_count when set includes the total count of keys matching\nthe query constraints in the result.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "KV"
        ]
      }
    },
    "/v1/stores/{header.store}/partitions/{header.partition}/lease-renewals": {
      "post": {
        "summary": "Renew renews the lease so that it does not expire",
        "operationId": "Leases_Renew",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ptarmiganpbLeaseRenewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ptarmiganpbLeaseRenewRequest"
            }
          }
        ],
        "tags": [
          "Leases"
        ]
      }
    },
    "/v1/stores/{header.store}/partitions/{header.partition}/leases": {
      "get": {
        "operationId": "Leases_Query",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ptarmiganpbLeaseQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.replica",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Leases"
        ]
      },
      "post": {
        "summary": "Grant creates a lease which expires if the server does not receive a renewal\nwithin a given time to live period. All keys attached to the lease will be expired and\ndeleted if the lease expires. Each expired key generates a delete event in the event history.",
        "operationId": "Leases_Grant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ptarmiganpbLeaseGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ptarmiganpbLeaseGrantRequest"
            }
          }
        ],
        "tags": [
          "Leases"
        ]
      }
    },
    "/v1/stores/{header.store}/partitions/{header.partition}/leases/{ID}": {
      "get": {
        "summary": "Get retrieves information on a lease.",
        "operationId": "Leases_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ptarmiganpbLeaseGetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ID",
            "description": "ID is the lease ID for the lease.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "header.replica",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Leases"
        ]
      },
      "delete": {
        "summary": "Revoke revokes a lease. All keys attached to the lease will expire and be deleted.",
        "operationId": "Leases_Revoke",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ptarmiganpbLeaseRevokeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ID",
            "description": "ID is the lease ID to revoke. When the ID is revoked, all associated keys will be deleted.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "header.replica",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Leases"
        ]
      }
    },
    "/v1/stores/{header.store}/partitions/{header.partition}/transactions": {
      "post": {
        "summary": "Txn processes multiple requests in a single transaction.\nA txn request increments the revision of the key-value store\nand generates events with the same revision for every completed request.\nIt is not allowed to modify the same key several times within one txn.",
        "operationId": "KV_Txn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ptarmiganpbKVTxnResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ptarmiganpbKVTxnRequest"
            }
          }
        ],
        "tags": [
          "KV"
        ]
      }
    },
    "/v1/stores/{header.store}/partitions/{header.partition}/watchers": {
      "post": {
        "summary": "Watch creates a watcher to watch for events happening or that have happened.\nThe entire event history can be watched starting from the last compaction revision.",
        "operationId": "KV_Watch",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/ptarmiganpbKVWatchResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of ptarmiganpbKVWatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "header.store",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "header.partition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ptarmiganpbKVWatchRequest"
            }
          }
        ],
        "tags": [
          "KV"
        ]
      }
    }
  },
  "definitions": {
    "EventEventType": {
      "type": "string",
      "enum": [
        "PUT",
        "DELETE"
      ],
      "default": "PUT"
    },
    "KVPredicateComparison": {
      "type": "string",
      "enum": [
        "EQUAL",
        "GREATER",
        "LESS",
        "NOT_EQUAL"
      ],
      "default": "EQUAL"
    },
    "KVPredicateTarget": {
      "type": "string",
      "enum": [
        "VERSION",
        "CREATE",
        "MOD",
        "VALUE",
        "LEASE"
      ],
      "default": "VERSION"
    },
    "KVQueryRequestSortOrder": {
      "type": "string",
      "enum": [
        "NONE",
        "ASC",
        "DESC"
      ],
      "default": "NONE"
    },
    "KVQueryRequestSortTarget": {
      "type": "string",
      "enum": [
        "KEY",
        "VERSION",
        "CREATE",
        "MOD",
        "VALUE"
      ],
      "default": "KEY"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ptarmiganpbCompare": {
      "type": "object",
      "properties": {
        "selection": {
          "$ref": "#/definitions/ptarmiganpbKVSelection",
          "title": "Selection of keys to test"
        },
        "predicate": {
          "$ref": "#/definitions/ptarmiganpbKVPredicate",
          "title": "Condition to test"
        }
      }
    },
    "ptarmiganpbEvent": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/EventEventType",
          "description": "type is the kind of event. If type is a PUT, it indicates\nnew data has been stored to the key. If type is a DELETE,\nit indicates the key was deleted."
        },
        "kv": {
          "$ref": "#/definitions/ptarmiganpbKeyValue",
          "description": "kv holds the KeyValue for the event.\nA PUT event contains current kv pair.\nA PUT event with kv.Version=1 indicates the creation of a key.\nA DELETE/EXPIRE event contains the deleted key with\nits modification revision set to the revision of deletion."
        },
        "prev_kv": {
          "$ref": "#/definitions/ptarmiganpbKeyValue",
          "description": "prev_kv holds the key-value pair before the event happens."
        }
      }
    },
    "ptarmiganpbKVCompactionRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbPartitionRequestHeader"
        },
        "revision": {
          "type": "string",
          "format": "int64",
          "description": "revision is the key-value store revision for the compaction operation."
        },
        "physical": {
          "type": "boolean",
          "format": "boolean",
          "description": "physical is set so the RPC will wait until the compaction is physically\napplied to the local database such that compacted entries are totally\nremoved from the backend database."
        }
      },
      "description": "CompactionRequest compacts the key-value store up to a given revision. All superseded keys\nwith a revision less than the compaction revision will be removed."
    },
    "ptarmiganpbKVCompactionResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        }
      }
    },
    "ptarmiganpbKVDeleteRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbPartitionRequestHeader"
        },
        "selection": {
          "$ref": "#/definitions/ptarmiganpbKVSelection",
          "title": "Only keys matching the predicates in the selection will be deleted"
        },
        "prev_kv": {
          "type": "boolean",
          "format": "boolean",
          "description": "If prev_kv is set, ptarmigan gets the previous key-value pairs before deleting it.\nThe previous key-value pairs will be returned in the delete response."
        }
      }
    },
    "ptarmiganpbKVDeleteResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "deleted": {
          "type": "string",
          "format": "int64",
          "description": "deleted is the number of keys deleted by the delete range request."
        },
        "prev_kvs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbKeyValue"
          },
          "description": "if prev_kv is set in the request, the previous key-value pairs will be returned."
        }
      }
    },
    "ptarmiganpbKVPredicate": {
      "type": "object",
      "properties": {
        "comparison": {
          "$ref": "#/definitions/KVPredicateComparison",
          "description": "result is logical comparison operation for this comparison."
        },
        "target": {
          "$ref": "#/definitions/KVPredicateTarget",
          "description": "target is the key-value field to inspect for the comparison."
        },
        "version": {
          "type": "string",
          "format": "int64",
          "title": "version is the version of the given key"
        },
        "create_revision": {
          "type": "string",
          "format": "int64",
          "title": "create_revision is the creation revision of the given key"
        },
        "mod_revision": {
          "type": "string",
          "format": "int64",
          "description": "mod_revision is the last modified revision of the given key."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "value is the value of the given key, in bytes."
        },
        "lease": {
          "type": "string",
          "format": "int64",
          "description": "lease is the lease id of the given key."
        }
      }
    },
    "ptarmiganpbKVPutRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbPartitionRequestHeader"
        },
        "selection": {
          "$ref": "#/definitions/ptarmiganpbKVSelection",
          "title": "Only keys matching the predicates in the selection will be updated"
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "value is the value, in bytes, to associate with the key in the key-value store."
        },
        "lease": {
          "type": "string",
          "format": "int64",
          "description": "lease is the lease ID to associate with the key in the key-value store. A lease\nvalue of 0 indicates no lease."
        },
        "prev_kv": {
          "type": "boolean",
          "format": "boolean",
          "description": "If prev_kv is set, ptarmigan gets the previous key-value pair before changing it.\nThe previous key-value pair will be returned in the put response."
        },
        "ignore_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "If ignore_value is set, ptarmigan updates the key using its current value.\nReturns an error if the key does not exist."
        },
        "ignore_lease": {
          "type": "boolean",
          "format": "boolean",
          "description": "If ignore_lease is set, ptarmigan updates the key using its current lease.\nReturns an error if the key does not exist."
        }
      }
    },
    "ptarmiganpbKVPutResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "prev_kvs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbKeyValue"
          },
          "description": "if prev_kv is set in the request, the previous key-value pairs will be returned."
        }
      }
    },
    "ptarmiganpbKVQueryRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbPartitionRequestHeader"
        },
        "selection": {
          "$ref": "#/definitions/ptarmiganpbKVSelection",
          "title": "Only keys matching the predicates in the selection will be included in the result"
        },
        "after": {
          "type": "string",
          "description": "Use after to get the next page of results by inserting the after cursor from the\nprevious page."
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "limit is the limit on the number of keys returned in the result.\nIf limit is set to 0 the default limit is used."
        },
        "revision": {
          "type": "string",
          "format": "int64",
          "description": "revision is the revision of the store to use for the query.\nIf revision is less or equal to zero, the range is over the newest key-value store.\nIf the revision has been compacted, ErrCompacted is returned as a response."
        },
        "sort_order": {
          "$ref": "#/definitions/KVQueryRequestSortOrder",
          "description": "sort_order is the order for returned sorted results."
        },
        "sort_target": {
          "$ref": "#/definitions/KVQueryRequestSortTarget",
          "description": "sort_target is the key-value field to use for sorting."
        },
        "serializable": {
          "type": "boolean",
          "format": "boolean",
          "description": "serializable sets the range request to use serializable member-local reads.\nRange requests are linearizable by default; linearizable requests have higher\nlatency and lower throughput than serializable requests but reflect the current\nconsensus of the cluster. For better performance, in exchange for possible stale reads,\na serializable range request is served locally without needing to reach consensus\nwith other nodes in the cluster."
        },
        "exclude_values": {
          "type": "boolean",
          "format": "boolean",
          "title": "exclude_values when set excludes values from the resulting kvs"
        },
        "include_count": {
          "type": "boolean",
          "format": "boolean",
          "title": "include_count when set includes the total count of keys matching\nthe query constraints in the result"
        }
      }
    },
    "ptarmiganpbKVQueryResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "kvs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbKeyValue"
          },
          "description": "kvs is the list of key-value pairs matched by the query."
        },
        "more": {
          "type": "boolean",
          "format": "boolean",
          "description": "more indicates if there are more keys matching the query."
        },
        "after": {
          "type": "string",
          "description": "after is a cursor that can be used in to get the next page\nof results after this one."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "count is set to the total number of keys matching the query."
        }
      }
    },
    "ptarmiganpbKVRequestOp": {
      "type": "object",
      "properties": {
        "request_query": {
          "$ref": "#/definitions/ptarmiganpbKVQueryRequest"
        },
        "request_put": {
          "$ref": "#/definitions/ptarmiganpbKVPutRequest"
        },
        "request_delete": {
          "$ref": "#/definitions/ptarmiganpbKVDeleteRequest"
        },
        "request_txn": {
          "$ref": "#/definitions/ptarmiganpbKVTxnRequest"
        }
      }
    },
    "ptarmiganpbKVResponseOp": {
      "type": "object",
      "properties": {
        "response_query": {
          "$ref": "#/definitions/ptarmiganpbKVQueryResponse"
        },
        "response_put": {
          "$ref": "#/definitions/ptarmiganpbKVPutResponse"
        },
        "response_delete": {
          "$ref": "#/definitions/ptarmiganpbKVDeleteResponse"
        },
        "response_txn": {
          "$ref": "#/definitions/ptarmiganpbKVTxnResponse"
        }
      }
    },
    "ptarmiganpbKVSelection": {
      "type": "object",
      "properties": {
        "key_gt": {
          "type": "string",
          "format": "byte"
        },
        "key_gte": {
          "type": "string",
          "format": "byte"
        },
        "key_lt": {
          "type": "string",
          "format": "byte"
        },
        "key_lte": {
          "type": "string",
          "format": "byte"
        },
        "mod_revision_gt": {
          "type": "string",
          "format": "int64"
        },
        "mod_revision_gte": {
          "type": "string",
          "format": "int64"
        },
        "mod_revision_lt": {
          "type": "string",
          "format": "int64"
        },
        "mod_revision_lte": {
          "type": "string",
          "format": "int64"
        },
        "create_revision_gt": {
          "type": "string",
          "format": "int64"
        },
        "create_revision_gte": {
          "type": "string",
          "format": "int64"
        },
        "create_revision_lt": {
          "type": "string",
          "format": "int64"
        },
        "create_revision_lte": {
          "type": "string",
          "format": "int64"
        },
        "key_starts_with": {
          "type": "string",
          "format": "byte",
          "title": "Key must be prefixed with this value"
        },
        "key": {
          "type": "string",
          "format": "byte",
          "title": "Key must equal this value"
        },
        "lease": {
          "type": "string",
          "format": "int64",
          "title": "Must belong to this lease"
        }
      },
      "description": "KVSelection is a set of constraints\nthat must all be met for a kv to be\nincluded in a query result."
    },
    "ptarmiganpbKVTxnRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbPartitionRequestHeader"
        },
        "compare": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbCompare"
          },
          "description": "compare is a list of predicates representing a conjunction of terms.\nIf the comparisons succeed, then the success requests will be processed in order,\nand the response will contain their respective responses in order.\nIf the comparisons fail, then the failure requests will be processed in order,\nand the response will contain their respective responses in order."
        },
        "success": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbKVRequestOp"
          },
          "description": "success is a list of requests which will be applied when compare evaluates to true."
        },
        "failure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbKVRequestOp"
          },
          "description": "failure is a list of requests which will be applied when compare evaluates to false."
        }
      },
      "description": "From google paxosdb paper:\nOur implementation hinges around a powerful primitive which we call MultiOp. All other database\noperations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically\nand consists of three components:\n1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check\nfor the absence or presence of a value, or compare with a given value. Two different tests in the guard\nmay apply to the same or different entries in the database. All tests in the guard are applied and\nMultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise\nit executes f op (see item 3 below).\n2. A list of database operations called t op. Each operation in the list is either an insert, delete, or\nlookup operation, and applies to a single database entry. Two different operations in the list may apply\nto the same or different entries in the database. These operations are executed\nif guard evaluates to\ntrue.\n3. A list of database operations called f op. Like t op, but executed if guard evaluates to false."
    },
    "ptarmiganpbKVTxnResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "succeeded": {
          "type": "boolean",
          "format": "boolean",
          "description": "succeeded is set to true if the compare evaluated to true or false otherwise."
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbKVResponseOp"
          },
          "description": "responses is a list of responses corresponding to the results from applying\nsuccess if succeeded is true or failure if succeeded is false."
        }
      }
    },
    "ptarmiganpbKVWatchCursor": {
      "type": "object",
      "properties": {
        "revision": {
          "type": "string",
          "format": "int64"
        },
        "key": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ptarmiganpbKVWatchRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbPartitionRequestHeader"
        },
        "selection": {
          "$ref": "#/definitions/ptarmiganpbKVSelection",
          "title": "Selection of keys to watch"
        },
        "start": {
          "$ref": "#/definitions/ptarmiganpbKVWatchCursor",
          "description": "start is an optional cursor to watch from (exclusive). No start is \"now\"."
        },
        "progress_notify": {
          "type": "boolean",
          "format": "boolean",
          "description": "progress_notify is set so that the ptarmigan server will periodically send a WatchResponse with\nno events to the new watcher if there are no recent events. It is useful when clients\nwish to recover a disconnected watcher starting from a recent known revision.\nThe ptarmigan server may decide how often it will send notifications based on current load."
        },
        "no_put": {
          "type": "boolean",
          "format": "boolean",
          "description": "filter out put events."
        },
        "no_delete": {
          "type": "boolean",
          "format": "boolean",
          "description": "filter out delete event."
        },
        "prev_kv": {
          "type": "boolean",
          "format": "boolean",
          "description": "If prev_kv is set, created watcher gets the previous KV before the event happens.\nIf the previous KV is already compacted, nothing will be returned."
        }
      }
    },
    "ptarmiganpbKVWatchResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "compacted": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicates that the watch request tried watching from a\ncompacted revision. The client should treat the watcher\nas canceled and should not try to create any watcher with\nthe same start again."
        },
        "cancel_reason": {
          "type": "string",
          "description": "cancel_reason indicates the reason for canceling the watcher."
        },
        "after": {
          "$ref": "#/definitions/ptarmiganpbKVWatchCursor",
          "description": "Watchers should keep track of the latest after cursor\nso that they can resume where they left off with a\nsubsequent watch request. If the last watch request\nwas canceled due to compaction this cursor is not valid\nUse of an after cursor from a compacted revision will\nresult in another canceled watch request."
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbEvent"
          },
          "description": "Events contains a list of events ordered by\nby [revision,key]. There may be events from several different\nrevisions in the events list, but events from older revisions\nwill appear first."
        }
      }
    },
    "ptarmiganpbKeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "key is the key in bytes. An empty key is not allowed."
        },
        "create_revision": {
          "type": "string",
          "format": "int64",
          "description": "create_revision is the revision of last creation on this key."
        },
        "mod_revision": {
          "type": "string",
          "format": "int64",
          "description": "mod_revision is the revision of last modification on this key."
        },
        "version": {
          "type": "string",
          "format": "int64",
          "description": "version is the version of the key. A deletion resets\nthe version to zero and any modification of the key\nincreases its version."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "value is the value held by the key, in bytes."
        },
        "lease": {
          "type": "string",
          "format": "int64",
          "description": "lease is the ID of the lease that attached to key.\nWhen the attached lease expires, the key will be deleted.\nIf lease is 0, then no lease is attached to the key."
        }
      }
    },
    "ptarmiganpbLease": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "format": "int64",
          "title": "ID is the lease ID"
        },
        "TTL": {
          "type": "string",
          "format": "int64",
          "description": "TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds."
        },
        "grantedTTL": {
          "type": "string",
          "format": "int64",
          "description": "GrantedTTL is the initial granted time in seconds upon lease creation/renewal."
        }
      }
    },
    "ptarmiganpbLeaseGetResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "lease": {
          "$ref": "#/definitions/ptarmiganpbLease"
        }
      }
    },
    "ptarmiganpbLeaseGrantRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbPartitionRequestHeader"
        },
        "TTL": {
          "type": "string",
          "format": "int64",
          "description": "TTL is the advisory time-to-live in seconds. Expired lease will return -1."
        }
      }
    },
    "ptarmiganpbLeaseGrantResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "lease": {
          "$ref": "#/definitions/ptarmiganpbLease"
        }
      }
    },
    "ptarmiganpbLeaseQueryResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "leases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ptarmiganpbLease"
          }
        }
      }
    },
    "ptarmiganpbLeaseRenewRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbPartitionRequestHeader"
        },
        "ID": {
          "type": "string",
          "format": "int64",
          "description": "ID is the lease ID for the lease to keep alive."
        }
      }
    },
    "ptarmiganpbLeaseRenewResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        },
        "lease": {
          "$ref": "#/definitions/ptarmiganpbLease"
        }
      }
    },
    "ptarmiganpbLeaseRevokeResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/ptarmiganpbResponseHeader"
        }
      }
    },
    "ptarmiganpbPartitionRequestHeader": {
      "type": "object",
      "properties": {
        "store": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "replica": {
          "type": "string"
        }
      }
    },
    "ptarmiganpbResponseHeader": {
      "type": "object",
      "properties": {
        "member_id": {
          "type": "string",
          "format": "uint64",
          "description": "member_id is the ID of the member which sent the response."
        },
        "revision": {
          "type": "string",
          "format": "int64",
          "description": "revision is the key-value store revision when the request was applied.\nFor watch progress responses, the header.revision indicates progress. All future events\nrecieved in this stream are guaranteed to have a higher revision number than the\nheader.revision number."
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
